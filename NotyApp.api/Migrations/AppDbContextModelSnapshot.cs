// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotyApp.api.contexts;

#nullable disable

namespace NotyApp.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NotyApp.api.models.Contact", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("reciever_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("sender_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("reciever_id");

                    b.HasIndex("sender_id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("NotyApp.api.models.Message", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("reciever_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("sender_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("reciever_id");

                    b.HasIndex("sender_id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("NotyApp.api.models.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("NotyApp.api.models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("NotyApp.api.models.UserRole", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("role_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("NotyApp.api.models.Contact", b =>
                {
                    b.HasOne("NotyApp.api.models.User", "reciever")
                        .WithMany("recievedContacts")
                        .HasForeignKey("reciever_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NotyApp.api.models.User", "Sender")
                        .WithMany("addedContacts")
                        .HasForeignKey("sender_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("reciever");
                });

            modelBuilder.Entity("NotyApp.api.models.Message", b =>
                {
                    b.HasOne("NotyApp.api.models.User", "reciever")
                        .WithMany("recievedMessages")
                        .HasForeignKey("reciever_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NotyApp.api.models.User", "sender")
                        .WithMany("sendedMessages")
                        .HasForeignKey("sender_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("reciever");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("NotyApp.api.models.UserRole", b =>
                {
                    b.HasOne("NotyApp.api.models.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotyApp.api.models.User", "user")
                        .WithMany("roles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotyApp.api.models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("NotyApp.api.models.User", b =>
                {
                    b.Navigation("addedContacts");

                    b.Navigation("recievedContacts");

                    b.Navigation("recievedMessages");

                    b.Navigation("roles");

                    b.Navigation("sendedMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
